@import "./helpers.scss";

@function var-link($var-input, $opacity: 1) {
  $prefix: "--";
  $var-prefix: slice($var-input, 1, 2);
  $var-full: $var-input;
  // Prefix prepend needed
  @if $var-prefix != $prefix {
    $var-full: $prefix + $var-input;
  }
  @return var(unquote($var-full));
}

@function color-link($var-input, $opacity: 1) {
  $prefix: "--";
  $var-prefix: slice($var-input, 1, 2);
  $var-full: $var-input;
  // Prefix prepend needed
  @if $var-prefix != $prefix {
    $var-full: $prefix + $var-input;
  }
  @return rgba(var(unquote($var-full)), $opacity);
}

// Generates a random number between $min and $max
@function random-num($min, $max) {
  $rand: random();
  $randomNum: $min + floor($rand * (($max - $min) + 1));

  @return $randomNum;
}


// Clamps $number between $min and $max
@function clamp2($number, $min, $max) {
  @return min(max($number, $min), $max);
}

// Computes $number ^ $exp
// Note: $exponent must be an integer
@function pow-integer($number, $exp) {
  $value: 1;
  @if $exp > 0 {
      @for $i from 1 through $exp {
          $value: $value * $number;
      }
  }
  @else if $exp < 0 {
      @for $i from 1 through -$exp {
          $value: $value / $number;
      }
  }
  @return $value;
}

// Computes $number ^ $exp
// Note: $exponent can be a float/integer
@function pow-float($number, $exponent) {
  @if (round($exponent) != $exponent) {
    @return exp($exponent * ln($number));
  }
    
  $value: 1;
  
  @if $exponent > 0 {
      @for $i from 1 through $exponent {
          $value: $value * $number;
      }
  } @else if $exponent < 0 {
      @for $i from 1 through -$exponent {
          $value: $value / $number;
      }
  }

  @return $value;
}

// Returns a numerical approximation of sin
// Note: by default $angle assumes radians if no units are given
// To use degrees suffix it with 'deg'
@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow-integer(-1, $i) * pow-integer($angle, (2 * $i + 1)) / factorial(2 * $i + 1);
  }
  @return $sin;
}

// Returns a numerical approximation of cos
// Note: by default $angle assumes radians if no units are given
// To use degrees suffix it with 'deg'
@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
      $cos: $cos + pow-integer(-1, $i) * pow-integer($angle, 2 * $i) / factorial(2 * $i);
  }
  @return $cos;
}

// Returns a numerical approximation of tan
// Note: by default $angle assumes radians if no units are given
// To use degrees suffix it with 'deg'
@function tan($angle) {
  @return sin($angle) / cos($angle);
}